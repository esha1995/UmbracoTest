@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Core.HealthChecks.Checks
@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Core.PropertyEditors;
@using Umbraco.Cms.Core.Services.Implement
@using Umbraco.Cms.Infrastructure
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using UmbracoTest.Helpers
@using Umbraco.Cms.Core.Models
@inject IDataTypeService DataTypeService

@{
    // variables
    var houseList = Umbraco.Content(Guid.Parse("b82ef794-6d89-4ccc-9b23-8ef35c3706cc"));
    bool isHouseList = houseList.Id == Model.Id;
    var houses = houseList.Children();

    string areaCoder = QueryStringHelper.getQueryString(Context, "areaCode", "all");
    string sortBy = QueryStringHelper.getQueryString(Context, "category", "");


    var areaCodeList = (DropDownFlexibleConfiguration)DataTypeService.GetDataType(1123).Configuration;
    
    // sorting the list of houses
    if(isHouseList)
    {
        // getting all types of area codes created 
        foreach (var value in areaCodeList.Items)
        {
            if(areaCoder == value.Value)
            {
                houses = houses.Where(x => (string)x.Value("areaCodes") == value.Value);
            }       
        }
        if(areaCoder == "All")
        {
            houses = Umbraco.Content(Guid.Parse("b82ef794-6d89-4ccc-9b23-8ef35c3706cc")).Children();
        }
        
        // sort by depended in the category query
        if(sortBy == "datelh")
        {
            houses = houses.Where(x => x.IsVisible()).OrderBy(y => y.Value("houseDate"));
        }
        if (sortBy == "datehl")
        {
            houses = houses.Where(x => x.IsVisible()).OrderByDescending(y => y.Value("houseDate"));
        }
        if (sortBy == "pricelh")
        {
            houses = houses.Where(x => x.IsVisible()).OrderBy(y => y.Value("price"));
        }
        if (sortBy == "pricehl")
        {
            houses = houses.Where(x => x.IsVisible()).OrderByDescending(y => y.Value("price"));
        }

    }

    // if not house list page (meaning home page then descend by date)
    else 
    {
        houses = houses.Where(x => x.IsVisible()).OrderByDescending(y => y.Value("houseDate"));
    }
    
    // getting values 
    int numberOfHouses = houses.Count();
    int fallbackPageSize = isHouseList ? 5 : 3; // if houselist then size 5 else 3
    int counter = 0;
    int pageSize = QueryStringHelper.getIntFromQueryString(Context, "size", fallbackPageSize); 
    int pageNumber = QueryStringHelper.getIntFromQueryString(Context, "page", 1);
    var pageOfHouses = houses.Skip((pageNumber - 1) * pageSize).Take(pageSize);
    var pageCount = numberOfHouses > 0 ? Math.Ceiling((double) numberOfHouses / pageSize) : 1;
}

<div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 justify-content-center">
        <div class="col-mdx-10 col-lg-8 col-xl-7">


@if(isHouseList && pageNumber == 1)
{
    // sorting and adding to query 
    <div class="dropdown">
        <div class="dropdown-content">
            <strong>Area code: </strong>
            <a href="@($"{houseList.Url()}?areaCode=all&category={sortBy}")">All │</a>
            @foreach (var value in areaCodeList.Items)
            {
                // getting all created zipcodes and printing them
                <a href="@($"{houseList.Url()}?areaCode={value.Value}&category={sortBy}")">@value.Value │</a>
            }
        </div>
    </div>

    <div class="dropdown">
        <div class="dropdown-content">
            <strong>Sort by date: </strong>
            <a href="@($"{houseList.Url()}?areaCode={areaCoder}&category=datehl")">high - low │</a>
            <a href="@($"{houseList.Url()}?areaCode={areaCoder}&category=datelh")">low - high │</a>
        </div>
    </div>

    <div class="dropdown">
        <div class="dropdown-content">
            <strong>Sort by price: </strong>
            <a href="@($"{houseList.Url()}?areaCode={areaCoder}&category=pricehl")">high - low │</a>
            <a href="@($"{houseList.Url()}?areaCode={areaCoder}&category=pricelh")">low - high │</a>
        </div>
    </div>
    <hr class="my-4" />
}

else if(!isHouseList)
{
    // if hompage then write this instead
    <p class="post-meta"><strong>@numberOfHouses</strong> houses for sell. Three newest houses: </p>
}

@foreach (var house in pageOfHouses)
{
    // create lidt of houses 
    var mediaPicker = (IPublishedContent)house.Value("mainImage");
    var adress = house.HasValue("adress") ? house.Value("adress") : house.Name;
    
    if (mediaPicker != null)
    {
        <img src="@mediaPicker.Url()" style="width:200px" alt="@mediaPicker.Value("alt")" />
    }

    <div class="post-preview">
        <a href="@house.Url()">
            <h2 class="post-title">@adress</h2>
        </a>
        <p class="post-meta">
            <strong>Seller:</strong> @house.Value("sellerName"),
            <strong>Date:</strong> @house.Value("houseDate"),
            <strong>Price:</strong> @house.Value("price"),
            <strong>Area code: </strong>@house.Value("areaCodes")
        </p>
    </div>

    // divider between houses (only if not last house)
    counter++;
    if(counter < pageSize)
    {
        <hr class="my-4" />
    }
}

@if(isHouseList && pageCount > 1)
{
 
    <div class="paging-block">
        @if(pageNumber > 1)
        {
            <a class="btn btn-primary float-right" href="@($"{houseList.Url()}?category={sortBy}&areaCode={areaCoder}&page={pageNumber - 1}&size={pageSize}")">Prev</a>
        }
        else
        {
            @Html.Raw("&nbsp;");
        }
        @if(pageNumber < pageCount)
        {
            <a class="btn btn-primary float-right" href="@($"{houseList.Url()}?category={sortBy}&areaCode={areaCoder}&page={pageNumber + 1}&size={pageSize}")">Next</a>
        }
        else
        {
            @Html.Raw("&nbsp;");
        }
    </div>

    <div class="paging-block text-center">
        <span>Page @pageNumber of <strong>@pageCount</strong></span>
    </div>
}
@if(!isHouseList)
{
    <a class="btn btn-primary float-right" href="@(houseList.Url())">See all houses for sell</a>
}